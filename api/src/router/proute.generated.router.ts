// This file is generated by proute, do not edit it manually, it will be override

import { isRouteEndpointModule, createRoute, createOpenapiJson } from 'proute';
import { RESOURCES } from './proute.generated.routes';
import { Router } from 'express';
import routerConfig from './config'
import $middleware_$0 from './middlewares';
import $route_delete_auth_$1 from './auth/delete';
import $route_get_auth_config_$2 from './auth/config.get';
import $route_get_auth_google_$3 from './auth/google/get';
import $route_get_auth_google_callback_$4 from './auth/google/callback.get';
import $route_get_auth_me_$5 from './auth/me.get';
import $route_get_books_$6 from './books/get';
import $route_get_books_id_$7 from './books/$id.get';
import $route_delete_books_id_bookmark_$8 from './books/$id.bookmark.delete';
import $route_post_books_id_bookmark_$9 from './books/$id.bookmark.post';
import $route_get_books_id_chapter_chapterId_$10 from './books/$id.chapter.$chapterId.get';
import $route_post_books_id_refetch_$11 from './books/$id.refetch.post';
import $route_put_chapters_readprogress_$12 from './chapters/read-progress.put';
import $route_put_chapters_id_readprogress_$13 from './chapters/$id.read-progress.put';
import $route_get_chapters_id_source_raw_$14 from './chapters/$id.source.raw.get';
import $route_get_sources_$15 from './sources/get';
import $route_post_sources_refetch_$16 from './sources/refetch.post';
import $route_post_sources_subscribe_$17 from './sources/subscribe.post';
import $route_delete_sources_id_subscribe_$18 from './sources/$id.subscribe.delete';
import $route_post_sources_id_subscribe_$19 from './sources/$id.subscribe.post';

const router = Router();

//#region Routes
if (isRouteEndpointModule($route_delete_auth_$1)) {
  const route = createRoute($route_delete_auth_$1, { middlewares: [$middleware_$0] });
  router.delete('/auth', route.handler);
}
if (isRouteEndpointModule($route_get_auth_config_$2)) {
  const route = createRoute($route_get_auth_config_$2, { middlewares: [$middleware_$0] });
  router.get('/auth/config', route.handler);
}
if (isRouteEndpointModule($route_get_auth_google_$3)) {
  const route = createRoute($route_get_auth_google_$3, { middlewares: [$middleware_$0] });
  router.get('/auth/google', route.handler);
}
if (isRouteEndpointModule($route_get_auth_google_callback_$4)) {
  const route = createRoute($route_get_auth_google_callback_$4, { middlewares: [$middleware_$0] });
  router.get('/auth/google/callback', route.handler);
}
if (isRouteEndpointModule($route_get_auth_me_$5)) {
  const route = createRoute($route_get_auth_me_$5, { middlewares: [$middleware_$0] });
  router.get('/auth/me', route.handler);
}
if (isRouteEndpointModule($route_get_books_$6)) {
  const route = createRoute($route_get_books_$6, { middlewares: [$middleware_$0] });
  router.get('/books', route.handler);
}
if (isRouteEndpointModule($route_get_books_id_$7)) {
  const route = createRoute($route_get_books_id_$7, { middlewares: [$middleware_$0] });
  router.get('/books/:id', route.handler);
}
if (isRouteEndpointModule($route_delete_books_id_bookmark_$8)) {
  const route = createRoute($route_delete_books_id_bookmark_$8, { middlewares: [$middleware_$0] });
  router.delete('/books/:id/bookmark', route.handler);
}
if (isRouteEndpointModule($route_post_books_id_bookmark_$9)) {
  const route = createRoute($route_post_books_id_bookmark_$9, { middlewares: [$middleware_$0] });
  router.post('/books/:id/bookmark', route.handler);
}
if (isRouteEndpointModule($route_get_books_id_chapter_chapterId_$10)) {
  const route = createRoute($route_get_books_id_chapter_chapterId_$10, { middlewares: [$middleware_$0] });
  router.get('/books/:id/chapter/:chapterId', route.handler);
}
if (isRouteEndpointModule($route_post_books_id_refetch_$11)) {
  const route = createRoute($route_post_books_id_refetch_$11, { middlewares: [$middleware_$0] });
  router.post('/books/:id/refetch', route.handler);
}
if (isRouteEndpointModule($route_put_chapters_readprogress_$12)) {
  const route = createRoute($route_put_chapters_readprogress_$12, { middlewares: [$middleware_$0] });
  router.put('/chapters/read-progress', route.handler);
}
if (isRouteEndpointModule($route_put_chapters_id_readprogress_$13)) {
  const route = createRoute($route_put_chapters_id_readprogress_$13, { middlewares: [$middleware_$0] });
  router.put('/chapters/:id/read-progress', route.handler);
}
if (isRouteEndpointModule($route_get_chapters_id_source_raw_$14)) {
  const route = createRoute($route_get_chapters_id_source_raw_$14, { middlewares: [$middleware_$0] });
  router.get('/chapters/:id/source/raw', route.handler);
}
if (isRouteEndpointModule($route_get_sources_$15)) {
  const route = createRoute($route_get_sources_$15, { middlewares: [$middleware_$0] });
  router.get('/sources', route.handler);
}
if (isRouteEndpointModule($route_post_sources_refetch_$16)) {
  const route = createRoute($route_post_sources_refetch_$16, { middlewares: [$middleware_$0] });
  router.post('/sources/refetch', route.handler);
}
if (isRouteEndpointModule($route_post_sources_subscribe_$17)) {
  const route = createRoute($route_post_sources_subscribe_$17, { middlewares: [$middleware_$0] });
  router.post('/sources/subscribe', route.handler);
}
if (isRouteEndpointModule($route_delete_sources_id_subscribe_$18)) {
  const route = createRoute($route_delete_sources_id_subscribe_$18, { middlewares: [$middleware_$0] });
  router.delete('/sources/:id/subscribe', route.handler);
}
if (isRouteEndpointModule($route_post_sources_id_subscribe_$19)) {
  const route = createRoute($route_post_sources_id_subscribe_$19, { middlewares: [$middleware_$0] });
  router.post('/sources/:id/subscribe', route.handler);
}
//#endregion

//#region Docs
export const openapiJson = createOpenapiJson({
  specs: {},
  resources: RESOURCES,
  routerConfig: routerConfig,
  endpoints: [
    { method: 'delete', path: '/auth', module: $route_delete_auth_$1 },
    { method: 'get', path: '/auth/config', module: $route_get_auth_config_$2 },
    { method: 'get', path: '/auth/google', module: $route_get_auth_google_$3 },
    { method: 'get', path: '/auth/google/callback', module: $route_get_auth_google_callback_$4 },
    { method: 'get', path: '/auth/me', module: $route_get_auth_me_$5 },
    { method: 'get', path: '/books', module: $route_get_books_$6 },
    { method: 'get', path: '/books/:id', module: $route_get_books_id_$7 },
    { method: 'delete', path: '/books/:id/bookmark', module: $route_delete_books_id_bookmark_$8 },
    { method: 'post', path: '/books/:id/bookmark', module: $route_post_books_id_bookmark_$9 },
    { method: 'get', path: '/books/:id/chapter/:chapterId', module: $route_get_books_id_chapter_chapterId_$10 },
    { method: 'post', path: '/books/:id/refetch', module: $route_post_books_id_refetch_$11 },
    { method: 'put', path: '/chapters/read-progress', module: $route_put_chapters_readprogress_$12 },
    { method: 'put', path: '/chapters/:id/read-progress', module: $route_put_chapters_id_readprogress_$13 },
    { method: 'get', path: '/chapters/:id/source/raw', module: $route_get_chapters_id_source_raw_$14 },
    { method: 'get', path: '/sources', module: $route_get_sources_$15 },
    { method: 'post', path: '/sources/refetch', module: $route_post_sources_refetch_$16 },
    { method: 'post', path: '/sources/subscribe', module: $route_post_sources_subscribe_$17 },
    { method: 'delete', path: '/sources/:id/subscribe', module: $route_delete_sources_id_subscribe_$18 },
    { method: 'post', path: '/sources/:id/subscribe', module: $route_post_sources_id_subscribe_$19 },
  ],
});
router.get('/docs/openapi.json', (req, res) => {
  res.json(openapiJson);
});
router.get('/docs', (req, res) => {
  const jsonEndpoint = req.baseUrl ? `${req.baseUrl}/docs/openapi.json` : '/docs/openapi.json'
  res.send(`
<!doctype html>
<html>
  <head>
    <meta charset="utf-8">
    <script type="module" src="https://unpkg.com/rapidoc/dist/rapidoc-min.js"></script>
  </head>
  <body>
    <rapi-doc spec-url = "${jsonEndpoint}"> </rapi-doc>
  </body>
</html>`
  );
});
//#endregion

export { router };
